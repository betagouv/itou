import re

from django.conf import settings
from django.core import mail
from django.core.mail import get_connection
from django.core.mail.backends.base import BaseEmailBackend
from django.core.mail.message import EmailMessage
from django.template.loader import get_template

import itou.utils.actors.email as actors


def remove_extra_line_breaks(text):
    """
    Replaces multiple line breaks with just one.

    Useful to suppress empty line breaks generated by Django's template tags
    in emails text templates.
    """
    return re.sub(r"\n{3,}", "\n\n", text)


def get_email_text_template(template, context):
    context.update(
        {
            "itou_protocol": settings.ITOU_PROTOCOL,
            "itou_fqdn": settings.ITOU_FQDN,
            "itou_email_contact": settings.ITOU_EMAIL_CONTACT,
            "itou_environment": settings.ITOU_ENVIRONMENT,
        }
    )
    return remove_extra_line_breaks(get_template(template).render(context).strip())


def get_email_message(to, context, subject, body, from_email=settings.DEFAULT_FROM_EMAIL, bcc=None):
    subject_prefix = "[DEMO] " if settings.ITOU_ENVIRONMENT == "DEMO" else ""
    return mail.EmailMessage(
        from_email=from_email,
        to=to,
        bcc=bcc,
        subject=subject_prefix + get_email_text_template(subject, context),
        body=get_email_text_template(body, context),
    )


# EXPERIMENTAL:
# ---
# Custom async email backend wrapper
# Dramatiq version


def serializeEmailMessage(email_message):
    """
    Returns a dict with `EmailMessage` instance content serializable via Pickle (remote data sending concern).

    **Important:**
    Some important features & fields of `EmailMessage` are not "serialized":
    * attachments
    * special options of the messages

    Just the bare minimum used by the app is kept for serialization.

    This functions works in pair with `deserializeEmailMessage`.
    """
    return {
        "subject": email_message.subject,
        "to": email_message.to,
        "from_email": email_message.from_email,
        "cc": email_message.cc,
        "bcc": email_message.bcc,
        "body": email_message.body,
    }


def deserializeEmailMessage(serialized_email_message):
    """
        Creates a "light" version of the original `EmailMessage` passed to the email backend.

        In order to be serializable, we:
        * only get the fields actually used by the app (defined in counterpart `serializeEmailMessage`)
        * add a reference to the "synchronous" email backend (for convenience)

        *Tip*: use non-serializable objects only when deserialization is over... (f.i. email backends)
    """
    return EmailMessage(connection=get_connection(backend=settings.ASYNC_EMAIL_BACKEND), **serialized_email_message)


class AsyncEmailBackend(BaseEmailBackend):
    """ Custom async email backend wrapper

        Decorating a method with `@actor` does not work (no static context).
        Only functions can be Huey tasks.

        This class:
        * wraps an email backend defined in `settings.ASYNC_EMAIL_BACKEND`
        * delegate the actual email sending to a function with *serializable* parameters

        See:
        * `base.py` section "Dramatiq" for details on `ASYNC_EMAIL_BACKEND`
        * `_async_send_messages` for more on details on async/serialization concerns
    """

    def send_messages(self, email_messages):
        # Turn emails/parameters into a JSON payload (serializable)
        if not email_messages:
            return

        emails = [serializeEmailMessage(email) for email in email_messages]

        actors.async_send_messages.send(emails)

        # We don't care about returning a result (and we can't without blocking)
        return len(email_messages)
