import json
import logging
import os

from django.contrib.gis.geos import GEOSGeometry
from django.core.management.base import BaseCommand
from django.template.defaultfilters import slugify

from itou.cities.models import City
from itou.utils.address.departments import DEPARTMENTS, department_from_postcode


CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))

# Use the data generated by `django-admin generate_cities`.
CITIES_JSON_FILE = f"{CURRENT_DIR}/data/cities.json"

# Reminder: Longitude (x) == West/East and Latitude (y) == North/South.
# Unfortunately there is no standard order so some geo services show (lat, long)
# in this order while others show (long, lat).
# e.g. google maps shows (lat, long) but here we use (long, lat).
MISSING_COORDS = [
    # {
    #     "nom": name,
    #     "code": insee_code,
    #     "codesPostaux": [zipcode],
    #     "centre": {"type": "Point", "coordinates": [longitude, latitude],
    # },
    {
        "nom": "Miquelon-Langlade",
        "code": "97501",
        "codesPostaux": ["97500"],
        "centre": {"type": "Point", "coordinates": [-56.379167, 47.1]},
    },
    {
        "nom": "Saint-Pierre",
        "code": "97502",
        "codesPostaux": ["97500"],
        "centre": {"type": "Point", "coordinates": [55.4778, -21.3419]},
    },
    {
        "nom": "Saint-Barthélemy",
        "code": "97701",
        "codesPostaux": ["97133"],
        "centre": {"type": "Point", "coordinates": [-62.8342438, 17.897728]},
    },
    {
        "nom": "Saint-Martin",
        "code": "97801",
        "codesPostaux": ["97150"],
        "centre": {"type": "Point", "coordinates": [-63.0668, 18.0603]},
    },
    {
        "nom": "Sainte-Clotilde",
        # Not a mistake. 6 digits and not the usual 5.
        "code": "974454",
        "codesPostaux": ["97490"],
        "centre": {"type": "Point", "coordinates": [55.4955, -20.8955]},
    },
]


class Command(BaseCommand):
    """
    Import French cities data from a JSON file into the database.

    To debug:
        django-admin import_cities --dry-run
        django-admin import_cities --dry-run --verbosity=2

    To populate the database:
        django-admin import_cities
    """

    help = "Import the content of the French cities csv file into the database."

    def add_arguments(self, parser):
        parser.add_argument("--dry-run", dest="dry_run", action="store_true", help="Only print data to import")

    def set_logger(self, verbosity):
        """
        Set logger level based on the verbosity option.
        """
        handler = logging.StreamHandler(self.stdout)

        self.logger = logging.getLogger(__name__)
        self.logger.propagate = False
        self.logger.addHandler(handler)

        self.logger.setLevel(logging.INFO)
        if verbosity > 1:
            self.logger.setLevel(logging.DEBUG)

    def handle(self, dry_run=False, **options):

        self.set_logger(options.get("verbosity"))

        with open(CITIES_JSON_FILE, "r") as raw_json_data:

            json_data = json.load(raw_json_data)
            total_len = len(json_data)
            last_progress = 0

            # Transform list into convenient dictionary.
            json_data = {(item["nom"], item["code"]): item for item in json_data}

            for item in MISSING_COORDS:
                key = (item["nom"], item["code"])
                if key in json_data:
                    # The city of some missing coords is present in cities.json.
                    # e.g. Miquelon-Langlade
                    json_data[key]["centre"] = item["centre"]
                    continue
                # Some other cities are absent in cities.json.
                # e.g. Sainte-Clotilde
                json_data[key] = item

            # Transform dictionary back to list.
            json_data = json_data.values()

            for i, item in enumerate(json_data):

                progress = int((100 * i) / total_len)
                if progress > last_progress + 5:
                    self.stdout.write(f"Creating cities… {progress}%")
                    last_progress = progress

                name = item["nom"]
                post_codes = item["codesPostaux"]
                code_insee = item["code"]

                department = item.get("codeDepartement")

                if not department:
                    # Sometimes department is missing. We get it from the postcode.
                    if not post_codes:
                        self.stderr.write(f"No department for {name}. Skipping…")
                        continue
                    department = department_from_postcode(post_codes[0])

                assert department in DEPARTMENTS

                coords = item.get("centre")

                if coords:
                    coords = GEOSGeometry(f"{coords}")  # Feed `GEOSGeometry` with GeoJSON.
                else:
                    self.stderr.write(f"No coordinates for {name}. Skipping…")
                    continue

                slug = slugify(f"{name}-{department}")

                self.logger.debug("-" * 80)
                self.logger.debug(name)
                self.logger.debug(slug)
                self.logger.debug(post_codes)
                self.logger.debug(code_insee)
                self.logger.debug(department)
                self.logger.debug(coords)

                if not dry_run:
                    City.objects.update_or_create(
                        slug=slug,
                        defaults={
                            "department": department,
                            "name": name,
                            "post_codes": post_codes,
                            "code_insee": code_insee,
                            "coords": coords,
                        },
                    )

        self.stdout.write("-" * 80)
        self.stdout.write("Done.")
