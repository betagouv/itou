# Generated by Django 3.1.3 on 2020-12-05 16:59

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [("approvals", "0012_auto_20210203_1456")]

    operations = [
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION update_approval_end_at_for_prolongation()
                    RETURNS TRIGGER
                    LANGUAGE plpgsql
                    AS $$
                    BEGIN
                        --
                        -- When a prolongation is inserted/updated/deleted, the end date
                        -- of its approval is automatically pushed back or forth.
                        --
                        -- See:
                        -- https://www.postgresql.org/docs/12/triggers.html
                        -- https://www.postgresql.org/docs/12/plpgsql-trigger.html#PLPGSQL-TRIGGER-AUDIT-EXAMPLE
                        --
                        IF (TG_OP = 'DELETE' AND OLD.status = 'VALIDATED') THEN
                            -- At delete time, the approval's end date is pushed back if the prolongation
                            -- was validated.
                            UPDATE approvals_approval
                            SET end_at = end_at - (OLD.end_at - OLD.start_at)
                            WHERE id = OLD.approval_id;
                        ELSIF (TG_OP = 'INSERT' AND NEW.status = 'VALIDATED') THEN
                            -- At insert time, the approval's end date is pushed forward if the prolongation
                            -- is validated.
                            UPDATE approvals_approval
                            SET end_at = end_at + (NEW.end_at - NEW.start_at)
                            WHERE id = NEW.approval_id;
                        ELSIF (TG_OP = 'UPDATE') THEN
                            IF (NOT OLD.status = 'VALIDATED' AND NEW.status = 'VALIDATED') THEN
                                -- Push approval's end date forward if the prolongation is being validated.
                                UPDATE approvals_approval
                                SET end_at = end_at + (NEW.end_at - NEW.start_at)
                                WHERE id = NEW.approval_id;
                            ELSIF (OLD.status = 'VALIDATED' AND NEW.status = 'VALIDATED') THEN
                                -- Change approval's end date forward if the prolongation is being modified.
                                UPDATE approvals_approval
                                SET end_at = end_at - (OLD.end_at - OLD.start_at) + (NEW.end_at - NEW.start_at)
                                WHERE id = NEW.approval_id;
                            ELSIF (OLD.status = 'VALIDATED' AND NOT NEW.status = 'VALIDATED') THEN
                                -- Reset approval's end date if the prolongation is not validated anymore.
                                UPDATE approvals_approval
                                SET end_at = end_at - (OLD.end_at - OLD.start_at)
                                WHERE id = NEW.approval_id;
                            END IF;
                        END IF;
                        RETURN NULL;
                    END;
                $$;

                CREATE TRIGGER trigger_update_approval_end_at_for_prolongation
                AFTER INSERT OR UPDATE OR DELETE ON approvals_prolongation
                FOR EACH ROW
                EXECUTE FUNCTION update_approval_end_at_for_prolongation();
            """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS trigger_update_approval_end_at_for_prolongation ON approvals_prolongation;
                DROP FUNCTION IF EXISTS update_approval_end_at_for_prolongation();
            """,
        )
    ]
