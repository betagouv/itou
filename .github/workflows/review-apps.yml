
name: Review apps

# Run this pipeline when a label is added and
# when a push is made on this PR.
on:
  pull_request:
    branches: [ master ]
    types: [ labeled, synchronize ]

env:
  CLEVER_DOWNLOAD_URL: https://clever-tools.clever-cloud.com/releases/latest/clever-tools-latest_linux.tar.gz
  CLEVER_DIR: clever-tools-latest_linux
  CLEVER_CLI: clever-tools-latest_linux/clever
  ORGANIZATION_NAME: Itou
  ADDON_DB_NAME: discourse-db-obsolete
  CONFIGURATION_FILE: review-apps-config
  BRANCH: ${{ github.head_ref }}
  CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }}
  CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }}
  SECRETS_FILE: ${{ secrets.SECRETS_FILE }}
  POSTGRESQL_ADDON_URI: ${{ secrets.POSTGRESQL_ADDON_URI }}
  POSTGRESQL_ADDON_USER: ${{ secrets.POSTGRESQL_ADDON_USER }}
  REVIEW_APP_NAME: ::set-env name=REVIEW_APP_NAME::$(echo "review_$BRANCH" | sed -r 's/[-;\\/.]+/_/g; $ s/.$//')

jobs:
  delete-review-app:
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'review-app')

    steps:
    - uses: actions/checkout@v2

    - name: Set review app name
      run: echo $($REVIEW_APP_NAME)

    # - name: Link application
    #   run: |
    #     curl $CLEVER_DOWNLOAD_URL > $CLEVER_DIR.tar.gz
    #     tar -xvf $CLEVER_DIR.tar.gz
    #     $CLEVER_CLI login --token $CLEVER_TOKEN --secret $CLEVER_SECRET
    #     $CLEVER_CLI link $REVIEW_APP_NAME --org $ORGANIZATION_NAME

    # - name: Set DB name
    #   run: echo ::set-env name=REVIEW_APP_DB_NAME::$(echo $REVIEW_APP_NAME | sed -r 's/-/_/g')

    # - name: Delete review app
    #   run: |
    #     $CLEVER_CLI delete --yes

    # - name: Delete review app database
    #   run: |
    #     echo "Deleting database $REVIEW_APP_DB_NAME"
    #     psql -v ON_ERROR_STOP=1 $POSTGRESQL_ADDON_URI <<-EOSQL
    #       DROP DATABASE IF EXISTS $REVIEW_APP_DB_NAME;
    #     EOSQL
    #     echo "Database deleted successfully!"


  # create-review-app:
  #   runs-on: ubuntu-latest
  #   needs: delete-review-app
  #   if: always()

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       ref: ${{ github.head_ref }}

  #   - run: git fetch --prune --unshallow

  #   - name: Set review app name
  #     run:
  #       echo ::set-env name=REVIEW_APP_NAME::$(echo "review_$BRANCH" | sed -r 's/[-;\\/.]+/_/g; $ s/.$//')

  #   - name: Set deploy url
  #     run:
  #       echo ::set-env name=DEPLOY_URL::$(echo "$REVIEW_APP_NAME.cleverapps.io" | sed -r 's/_/-/g')

  #   - name: Create review app
  #     run: |
  #       curl curl $CLEVER_DOWNLOAD_URL > $CLEVER_DIR.tar.gz
  #       tar -xvf $CLEVER_DIR.tar.gz
  #       $CLEVER_CLI login --token $CLEVER_TOKEN --secret $CLEVER_SECRET
  #       $CLEVER_CLI create $REVIEW_APP_NAME -t docker --org $ORGANIZATION_NAME --region par --alias $REVIEW_APP_NAME
  #       $CLEVER_CLI domain add $DEPLOY_URL --alias $REVIEW_APP_NAME
  #       $CLEVER_CLI link $REVIEW_APP_NAME --org $ORGANIZATION_NAME

  #   - name: Link DB addon
  #     run: |
  #       $CLEVER_CLI link $REVIEW_APP_NAME --org $ORGANIZATION_NAME
  #       $CLEVER_CLI service link-addon $ADDON_DB_NAME

  #   - name: Set DB name
  #     run: echo ::set-env name=REVIEW_APP_DB_NAME::$(echo $REVIEW_APP_NAME | sed -r 's/-/_/g')

  #   - name: Create database
  #     run: |
  #       echo "Recreating database $REVIEW_APP_DB_NAME"
  #       psql -v ON_ERROR_STOP=1 $POSTGRESQL_ADDON_URI <<-EOSQL
  #         CREATE DATABASE $REVIEW_APP_DB_NAME OWNER $POSTGRESQL_ADDON_USER;
  #       EOSQL
  #       echo "Database created successfully!"
  #       # $CLEVER_CLI addon create postgresql-addon $REVIEW_APP_NAME-db --region eu --link $REVIEW_APP_NAME --yes --org $ORGANIZATION_NAME

  #   - name: Export environment variables
  #     run: |
  #       $CLEVER_CLI link $REVIEW_APP_NAME --org $ORGANIZATION_NAME
  #       $CLEVER_CLI service link-addon $CONFIGURATION_FILE
  #       export REVIEW_APP_DB_NAME=$(echo $REVIEW_APP_NAME | sed -r 's/-/_/g')
  #       $CLEVER_CLI env import-vars REVIEW_APP_DB_NAME
  #       # echo $SECRETS_FILE | base64 -d > .env
  #       # Export variables. Source does not work.
  #       # cf https://stackoverflow.com/questions/15474650/unix-what-is-the-difference-between-source-and-export
  #       # set -a
  #       # . .env

  #       # Then create a file to list all available variables
  #       # cat .env | grep -Po ".*=" |  sed -r 's/[=]+/,/g; $ s/.$//' |  tr -d '\n' > clever_env_vars.txt
  #       # rm .env

  #       # cat clever_env_vars.txt | xargs $CLEVER_CLI env import-vars

  #       # export DEPLOY_URL=$(cat .clever.json | grep -Po '(?<="deploy_url":)(.*?)(?=,)' | tr -d '"')
  #       # echo "DEPLOY_URL"
  #       # echo $DEPLOY_URL
  #       # git remote add clever $DEPLOY_URL
  #       # git push clever travis:master

  #   - name: Deploy to Clever Cloud
  #     run: $CLEVER_CLI deploy --branch $BRANCH --force --verbose

  #   - name: Add link to pull request
  #     uses: thollander/actions-comment-pull-request@master
  #     with:
  #       message: "🥁 L'environnement de test est prêt ! [👉 Je veux tester cette PR !](https://${{ env.REVIEW_APP_NAME }}.cleverapps.io)"
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# On PR closed, delete app and DB!!!